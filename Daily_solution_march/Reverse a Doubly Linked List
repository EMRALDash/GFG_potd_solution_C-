class Solution {
  public:
    Node* reverse(Node* head) {
        if (!head || !head->next) return head; // empty or single node

        Node* curr = head;
        Node* newHead = NULL;

        while (curr) {
            // swap prev and next
            Node* temp = curr->prev;
            curr->prev = curr->next;
            curr->next = temp;

            // move to "next" (which is actually prev now)
            newHead = curr;
            curr = curr->prev;
        }

        return newHead; // new head is the last visited node
    }
};
