#include <vector>
#include <queue>
#include <set>
#include <algorithm>
using namespace std;

class Solution {
  public:
    vector<int> topKSumPairs(vector<int>& a, vector<int>& b, int k) {
        int n = a.size();
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        
        priority_queue<pair<int, pair<int, int>>> maxHeap;
        set<pair<int, int>> visited;

        maxHeap.push({a[n - 1] + b[n - 1], {n - 1, n - 1}});
        visited.insert({n - 1, n - 1});

        vector<int> result;

        while (k-- && !maxHeap.empty()) {
            auto [sum, indices] = maxHeap.top();
            maxHeap.pop();
            result.push_back(sum);

            int i = indices.first, j = indices.second;

            if (i - 1 >= 0 && visited.find({i - 1, j}) == visited.end()) {
                maxHeap.push({a[i - 1] + b[j], {i - 1, j}});
                visited.insert({i - 1, j});
            }
            if (j - 1 >= 0 && visited.find({i, j - 1}) == visited.end()) {
                maxHeap.push({a[i] + b[j - 1], {i, j - 1}});
                visited.insert({i, j - 1});
            }
        }

        return result;
    }
};
