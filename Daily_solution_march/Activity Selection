class Solution {
  public:
    int activitySelection(vector<int> &start, vector<int> &finish) {
        int n = start.size();
        vector<pair<int, int>> activities;

        // Store activities as pairs {finish_time, start_time} for sorting
        for (int i = 0; i < n; i++) {
            activities.push_back({finish[i], start[i]});
        }

        // Sort by finish time (ascending order)
        sort(activities.begin(), activities.end());

        int count = 1;  // First activity is always selected
        int lastFinish = activities[0].first;

        for (int i = 1; i < n; i++) {
            // Pick only if the start time is strictly greater than last selected finish time
            if (activities[i].second > lastFinish) {  
                count++;
                lastFinish = activities[i].first;  // Update finish time
            }
        }

        return count;
    }
};
