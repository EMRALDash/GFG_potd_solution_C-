#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    // Helper to add two numeric strings
    string stringSum(string a, string b) {
        string res;
        int carry = 0, i = a.length() - 1, j = b.length() - 1;
        
        while (i >= 0 || j >= 0 || carry) {
            int sum = carry;
            if (i >= 0) sum += a[i--] - '0';
            if (j >= 0) sum += b[j--] - '0';
            res += (sum % 10) + '0';
            carry = sum / 10;
        }
        reverse(res.begin(), res.end());
        return res;
    }

    bool check(string s, int start, string num1, string num2) {
        string sum = stringSum(num1, num2);
        int len = sum.length();

        if (start + len > s.length() || s.substr(start, len) != sum)
            return false;

        if (start + len == s.length())
            return true;

        return check(s, start + len, num2, sum);
    }

    bool isSumString(string &s) {
        int n = s.length();

        // Try all first and second splits
        for (int i = 1; i < n; ++i) {
            for (int j = 1; i + j < n; ++j) {
                string num1 = s.substr(0, i);
                string num2 = s.substr(i, j);

                // Skip if num1 or num2 has leading 0s
                if ((num1.size() > 1 && num1[0] == '0') || (num2.size() > 1 && num2[0] == '0'))
                    continue;

                if (check(s, i + j, num1, num2))
                    return true;
            }
        }

        return false;
    }
};
