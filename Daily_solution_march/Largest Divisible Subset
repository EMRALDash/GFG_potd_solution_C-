class Solution {
  public:
    vector<int> largestSubset(vector<int>& arr) {
        int n = arr.size();
        sort(arr.begin(), arr.end());

        vector<vector<int>> dp(n);

        vector<int> best;

        for (int i = 0; i < n; ++i) {
            dp[i].push_back(arr[i]);

            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    if (dp[j].size() + 1 > dp[i].size() || 
                       (dp[j].size() + 1 == dp[i].size() && 
                        lexicographical_compare(dp[i].begin(), dp[i].end(),
                                                dp[j].begin(), dp[j].end()))) {
                        dp[i] = dp[j];
                        dp[i].push_back(arr[i]);
                    }
                }
            }

            if (dp[i].size() > best.size() || 
               (dp[i].size() == best.size() && dp[i] > best)) {
                best = dp[i];
            }
        }

        return best;
    }
};
