#include <bits/stdc++.h>
using namespace std;

struct TrieNode {
    TrieNode* child[26] = {};
    bool isEnd = false;
};

class Solution {
public:
    string longestString(vector<string>& words) {
        TrieNode* root = new TrieNode();
        for (auto &word : words) {
            TrieNode* node = root;
            for (char ch : word) {
                int idx = ch - 'a';
                if (!node->child[idx]) node->child[idx] = new TrieNode();
                node = node->child[idx];
            }
            node->isEnd = true;
        }

        string res = "";
        function<void(TrieNode*, string&)> dfs = [&](TrieNode* node, string& path) {
            if (node != root && !node->isEnd) return;
            if (path.size() > res.size() || (path.size() == res.size() && path < res))
                res = path;
            for (int i = 0; i < 26; ++i) {
                if (node->child[i]) {
                    path.push_back(i + 'a');
                    dfs(node->child[i], path);
                    path.pop_back();
                }
            }
        };

        string path = "";
        dfs(root, path);
        return res;
    }
};
