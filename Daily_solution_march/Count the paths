class Solution {
  public:
    int dfs(int node, int dest, vector<int> adj[], vector<int>& dp) {
        if (node == dest) return 1;
        if (dp[node] != -1) return dp[node];

        int totalPaths = 0;
        for (int neighbor : adj[node]) {
            totalPaths += dfs(neighbor, dest, adj, dp);
        }
        return dp[node] = totalPaths;
    }

    int countPaths(vector<vector<int>>& edges, int V, int src, int dest) {
        // Step 1: Create adjacency list
        vector<int> adj[V];
        for (auto& edge : edges) {
            adj[edge[0]].push_back(edge[1]);
        }

        // Step 2: DP array to store path counts from each node
        vector<int> dp(V, -1);

        // Step 3: Return number of paths from src to dest
        return dfs(src, dest, adj, dp);
    }
};
