class Solution {
  public:
    vector<int> bottomView(Node *root) {
        if (!root) return {};
        
        // Map to store the bottom-most node at each horizontal distance
        map<int, int> hdMap;
        
        // Queue to perform level order traversal
        // Stores pair of Node and its horizontal distance
        queue<pair<Node*, int>> q;
        q.push({root, 0});
        
        while (!q.empty()) {
            auto [node, hd] = q.front();
            q.pop();
            
            // Overwrite the value at horizontal distance with current node
            hdMap[hd] = node->data;
            
            if (node->left)
                q.push({node->left, hd - 1});
            if (node->right)
                q.push({node->right, hd + 1});
        }
        
        // Extracting the values in sorted order of horizontal distances
        vector<int> result;
        for (auto &entry : hdMap) {
            result.push_back(entry.second);
        }
        
        return result;
    }
};
