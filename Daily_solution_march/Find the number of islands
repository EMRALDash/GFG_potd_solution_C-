class Solution {
  public:
    void dfs(vector<vector<char>>& grid, int i, int j, int n, int m) {
        // Boundary conditions
        if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] == 'W')
            return;

        // Mark the cell as visited by changing it to 'W'
        grid[i][j] = 'W';

        // 8 possible directions
        int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};
        int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};

        for (int k = 0; k < 8; k++) {
            dfs(grid, i + dx[k], j + dy[k], n, m);
        }
    }

    int countIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size(), count = 0;

        // Iterate through the grid
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 'L') {  // Found a new island
                    count++;
                    dfs(grid, i, j, n, m);  // Mark the whole island as visited
                }
            }
        }
        return count;
    }
};
