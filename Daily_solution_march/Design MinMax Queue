#include <iostream>
#include <queue>
#include <deque>
#include <vector>

class SpecialQueue {
    std::queue<int> q;
    std::deque<int> minQ;
    std::deque<int> maxQ;

public:
    void enqueue(int x) {
        q.push(x);

        // Maintain increasing order in minQ
        while (!minQ.empty() && minQ.back() > x)
            minQ.pop_back();
        minQ.push_back(x);

        // Maintain decreasing order in maxQ
        while (!maxQ.empty() && maxQ.back() < x)
            maxQ.pop_back();
        maxQ.push_back(x);
    }

    void dequeue() {
        if (!q.empty()) {
            int front = q.front();
            q.pop();

            if (!minQ.empty() && minQ.front() == front)
                minQ.pop_front();
            if (!maxQ.empty() && maxQ.front() == front)
                maxQ.pop_front();
        }
    }

    int getFront() {
        return q.front();
    }

    int getMin() {
        return minQ.front();
    }

    int getMax() {
        return maxQ.front();
    }
};
