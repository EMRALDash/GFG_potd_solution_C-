class Solution {
  public:
    int countSubstr(string& s, int k) {
        return countAtMostK(s, k) - countAtMostK(s, k - 1);
    }

  private:
    int countAtMostK(const string& s, int k) {
        if (k == 0) return 0;

        int n = s.size();
        vector<int> freq(26, 0);
        int left = 0, right = 0;
        int count = 0;
        int unique = 0;

        while (right < n) {
            if (freq[s[right] - 'a'] == 0)
                unique++;
            freq[s[right] - 'a']++;
            
            while (unique > k) {
                freq[s[left] - 'a']--;
                if (freq[s[left] - 'a'] == 0)
                    unique--;
                left++;
            }

            // All substrings ending at right and starting between left and right are valid
            count += (right - left + 1);
            right++;
        }
        return count;
    }
};
