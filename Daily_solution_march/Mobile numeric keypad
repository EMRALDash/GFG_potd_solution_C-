class Solution {
  public:
    int getCount(int n) {
        if (n <= 0) return 0;
        if (n == 1) return 10;

        // Map of moves for each digit
        vector<vector<int>> moves = {
            {0, 8},      // 0
            {1, 2, 4},   // 1
            {2, 1, 3, 5},// 2
            {3, 2, 6},   // 3
            {4, 1, 5, 7},// 4
            {5, 2, 4, 6, 8}, // 5
            {6, 3, 5, 9},// 6
            {7, 4, 8},   // 7
            {8, 5, 7, 9, 0}, // 8
            {9, 6, 8}    // 9
        };

        // dp[d][l]: number of sequences of length l ending at digit d
        int dp[10][n+1];

        // Initialize for length = 1
        for (int i = 0; i <= 9; ++i)
            dp[i][1] = 1;

        // Build the table
        for (int len = 2; len <= n; ++len) {
            for (int d = 0; d <= 9; ++d) {
                dp[d][len] = 0;
                for (int m : moves[d]) {
                    dp[d][len] += dp[m][len - 1];
                }
            }
        }

        // Total count for all starting digits
        int total = 0;
        for (int i = 0; i <= 9; ++i)
            total += dp[i][n];

        return total;
    }
};
