class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        int n = arr.size();
        unordered_map<int, int> first_occurrence;
        int prefix_sum = 0;
        int max_len = 0;

        for (int i = 0; i < n; ++i) {
            // Convert array element
            if (arr[i] > k)
                prefix_sum += 1;
            else
                prefix_sum -= 1;

            // If sum is positive from index 0 to i
            if (prefix_sum > 0)
                max_len = i + 1;

            // Store the first occurrence of prefix_sum
            if (first_occurrence.find(prefix_sum) == first_occurrence.end())
                first_occurrence[prefix_sum] = i;

            // Check if a previous prefix_sum < current exists
            if (first_occurrence.find(prefix_sum - 1) != first_occurrence.end()) {
                int len = i - first_occurrence[prefix_sum - 1];
                max_len = max(max_len, len);
            }
        }
        return max_len;
    }
};
