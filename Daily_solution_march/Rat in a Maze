class Solution {
  public:
    vector<string> ratInMaze(vector<vector<int>>& maze) {
        int n = maze.size();
        vector<string> result;

        if (maze[0][0] == 0 || maze[n-1][n-1] == 0) {
            return result;  // No path if start or end is blocked
        }

        vector<vector<int>> visited(n, vector<int>(n, 0));
        string path = "";

        // Direction vectors: D, L, R, U
        int dx[] = {1, 0, 0, -1};
        int dy[] = {0, -1, 1, 0};
        char dir[] = {'D', 'L', 'R', 'U'};

        function<void(int, int)> dfs = [&](int x, int y) {
            if (x == n - 1 && y == n - 1) {
                result.push_back(path);
                return;
            }

            visited[x][y] = 1;

            for (int i = 0; i < 4; i++) {
                int newX = x + dx[i];
                int newY = y + dy[i];

                if (newX >= 0 && newY >= 0 && newX < n && newY < n &&
                    maze[newX][newY] == 1 && visited[newX][newY] == 0) {
                    
                    path.push_back(dir[i]);
                    dfs(newX, newY);
                    path.pop_back();  // Backtrack
                }
            }

            visited[x][y] = 0;  // Backtrack
        };

        dfs(0, 0);

        sort(result.begin(), result.end());  // Lexicographical order
        return result;
    }
};
