class Solution {
  public:
    vector<string> result;

    // Mapping digits to corresponding characters
    string keypad[10] = {
        "",     // 0
        "",     // 1
        "abc",  // 2
        "def",  // 3
        "ghi",  // 4
        "jkl",  // 5
        "mno",  // 6
        "pqrs", // 7
        "tuv",  // 8
        "wxyz"  // 9
    };

    // Backtracking function
    void backtrack(vector<int>& arr, int index, string current) {
        if (index == arr.size()) {
            result.push_back(current);
            return;
        }

        int digit = arr[index];
        string letters = keypad[digit];

        for (int i = 0; i < letters.size(); ++i) {
            backtrack(arr, index + 1, current + letters[i]);
        }
    }

    vector<string> possibleWords(vector<int> &arr) {
        // Filter out digits 0 and 1 (optional if we want to skip them)
        vector<int> filteredArr;
        for (int i = 0; i < arr.size(); ++i) {
            if (arr[i] >= 2 && arr[i] <= 9) {
                filteredArr.push_back(arr[i]);
            }
        }

        // If after filtering, we still have digits to process
        if (!filteredArr.empty()) {
            backtrack(filteredArr, 0, "");
        }

        return result;
    }
};
