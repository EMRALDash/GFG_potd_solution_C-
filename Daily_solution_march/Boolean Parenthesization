class Solution {
  public:
    unordered_map<string, int> dp; // Memoization map

    int solve(string &s, int i, int j, bool isTrue) {
        // Base Case
        if (i > j) return 0;
        if (i == j) { // If only one character remains
            if (isTrue) return s[i] == 'T';
            else return s[i] == 'F';
        }

        // Create a unique key for memoization
        string key = to_string(i) + "_" + to_string(j) + "_" + to_string(isTrue);
        if (dp.find(key) != dp.end()) return dp[key];

        int ways = 0;

        // Try placing parenthesis at each operator
        for (int k = i + 1; k < j; k += 2) { 
            char op = s[k];

            // Calculate left and right parts separately
            int leftTrue = solve(s, i, k - 1, true);
            int leftFalse = solve(s, i, k - 1, false);
            int rightTrue = solve(s, k + 1, j, true);
            int rightFalse = solve(s, k + 1, j, false);

            // Compute result based on operator
            if (op == '&') {
                if (isTrue)
                    ways += leftTrue * rightTrue;
                else
                    ways += leftFalse * rightTrue + leftTrue * rightFalse + leftFalse * rightFalse;
            } 
            else if (op == '|') {
                if (isTrue)
                    ways += leftTrue * rightTrue + leftFalse * rightTrue + leftTrue * rightFalse;
                else
                    ways += leftFalse * rightFalse;
            } 
            else if (op == '^') {
                if (isTrue)
                    ways += leftTrue * rightFalse + leftFalse * rightTrue;
                else
                    ways += leftTrue * rightTrue + leftFalse * rightFalse;
            }
        }

        return dp[key] = ways; // Store result in memoization table
    }

    int countWays(string &s) {
        dp.clear(); // Clear memoization table
        return solve(s, 0, s.length() - 1, true);
    }
};
