class Solution {
  public:
    int timer;
    bool isBridge(int V, vector<vector<int>>& edges, int c, int d) {
        // Build the adjacency list
        vector<int> adj[V];
        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]); // undirected
        }

        // Initialize required vectors
        vector<int> tin(V, -1);    // Time of insertion
        vector<int> low(V, -1);    // Lowest time reachable
        vector<bool> visited(V, false);
        timer = 0;
        bool bridge = false;

        // Start DFS
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, -1, adj, visited, tin, low, bridge, c, d);
            }
        }
        return bridge;
    }

    void dfs(int node, int parent, vector<int> adj[], vector<bool>& visited,
             vector<int>& tin, vector<int>& low, bool &bridge, int c, int d) {
        visited[node] = true;
        tin[node] = low[node] = timer++;
        
        for (int neighbor : adj[node]) {
            if (neighbor == parent) continue;

            if (!visited[neighbor]) {
                dfs(neighbor, node, adj, visited, tin, low, bridge, c, d);
                low[node] = min(low[node], low[neighbor]);

                // Check for bridge condition
                if (low[neighbor] > tin[node]) {
                    if ((node == c && neighbor == d) || (node == d && neighbor == c)) {
                        bridge = true;
                    }
                }
            } else {
                low[node] = min(low[node], tin[neighbor]);
            }
        }
    }
};
