class Solution {
  public:
    vector<vector<int>> uniquePerms(vector<int>& arr) {
        vector<vector<int>> result;
        vector<int> current;
        vector<bool> visited(arr.size(), false);

        sort(arr.begin(), arr.end());  // Sort to handle duplicates and ensure sorted order
        backtrack(arr, visited, current, result);
        return result;
    }

    void backtrack(vector<int>& arr, vector<bool>& visited, vector<int>& current, vector<vector<int>>& result) {
        if (current.size() == arr.size()) {
            result.push_back(current);
            return;
        }

        for (int i = 0; i < arr.size(); ++i) {
            // Skip used elements
            if (visited[i]) continue;

            // Skip duplicates (very important)
            if (i > 0 && arr[i] == arr[i - 1] && !visited[i - 1]) continue;

            visited[i] = true;
            current.push_back(arr[i]);

            backtrack(arr, visited, current, result);

            // Backtrack
            current.pop_back();
            visited[i] = false;
        }
    }
};
