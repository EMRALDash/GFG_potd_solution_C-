class Solution {
  public:
    vector<int> maxOfMins(vector<int>& arr) {
        int n = arr.size();
        vector<int> next_smaller(n, n);
        vector<int> prev_smaller(n, -1);
        stack<int> s;

        // Compute next smaller elements
        for (int i = 0; i < n; ++i) {
            while (!s.empty() && arr[s.top()] > arr[i]) {
                next_smaller[s.top()] = i;
                s.pop();
            }
            s.push(i);
        }

        // Clear stack for previous smaller computation
        while (!s.empty()) s.pop();

        // Compute previous smaller elements
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && arr[s.top()] > arr[i]) {
                prev_smaller[s.top()] = i;
                s.pop();
            }
            s.push(i);
        }

        // Result array initialized with minimum values
        vector<int> ans(n + 1, 0);

        // Fill ans[] for lengths based on min value ranges
        for (int i = 0; i < n; ++i) {
            int len = next_smaller[i] - prev_smaller[i] - 1;
            ans[len] = max(ans[len], arr[i]);
        }

        // Propagate the values to smaller window sizes
        for (int i = n - 1; i >= 1; --i) {
            ans[i] = max(ans[i], ans[i + 1]);
        }

        // Remove the dummy 0th index to match 1-based window sizes
        ans.erase(ans.begin());

        return ans;
    }
};
