class Solution {
  public:
    Node* swapKth(Node* head, int k) {
        if (!head) return head;
        
        // Step 1: Count total nodes
        int n = 0;
        Node* temp = head;
        while (temp) {
            n++;
            temp = temp->next;
        }

        // Step 2: If k is greater than n, return head
        if (k > n) return head;

        // Step 3: If both nodes are same, return head
        if (2*k - 1 == n) return head;

        // Step 4: Find kth node from start and end
        Node* prev1 = NULL; 
        Node* node1 = head;
        for (int i=1; i<k; i++) {
            prev1 = node1;
            node1 = node1->next;
        }

        Node* prev2 = NULL;
        Node* node2 = head;
        for (int i=1; i<n-k+1; i++) {
            prev2 = node2;
            node2 = node2->next;
        }

        // Step 5: Adjust previous nodes' next pointers
        if (prev1) prev1->next = node2;
        if (prev2) prev2->next = node1;

        // Step 6: Swap next pointers
        Node* tempNext = node1->next;
        node1->next = node2->next;
        node2->next = tempNext;

        // Step 7: Update head if needed
        if (k == 1) head = node2;
        if (k == n) head = node1;

        return head;
    }
};
