class Solution {
  public:
    void findMax(string& s, int k, string& maxNum, int idx) {
        // Base case
        if (k == 0) return;

        int n = s.length();
        char maxChar = s[idx];

        // Find the max digit from current index to end
        for (int i = idx + 1; i < n; i++) {
            if (s[i] > maxChar) {
                maxChar = s[i];
            }
        }

        // If the current digit is already the largest, no need to swap
        if (maxChar != s[idx]) k--;

        // Try all swaps with maxChar
        for (int i = n - 1; i >= idx; i--) {
            if (s[i] == maxChar) {
                swap(s[idx], s[i]);
                if (s > maxNum) maxNum = s;  // Update maxNum
                findMax(s, k, maxNum, idx + 1);  // Recurse
                swap(s[idx], s[i]); // Backtrack
            }
        }
    }

    // Main function
    string findMaximumNum(string& s, int k) {
        string maxNum = s;
        findMax(s, k, maxNum, 0);
        return maxNum;
    }
};
