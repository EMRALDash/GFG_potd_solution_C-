class Solution {
  public:
    int minValue(string &s, int k) {
        unordered_map<char, int> freq;
        for (char c : s) freq[c]++;

        // max heap to store frequencies
        priority_queue<int> pq;
        for (auto it = freq.begin(); it != freq.end(); ++it)
            pq.push(it->second);

        // Remove k characters greedily from the largest frequency
        while (k-- && !pq.empty()) {
            int top = pq.top(); pq.pop();
            if (--top > 0) pq.push(top);
        }

        // Now compute the value: sum of squares of remaining frequencies
        int result = 0;
        while (!pq.empty()) {
            int f = pq.top(); pq.pop();
            result += f * f;
        }

        return result;
    }
};
