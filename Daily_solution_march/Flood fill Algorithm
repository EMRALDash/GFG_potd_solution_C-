class Solution {
  public:
    void dfs(vector<vector<int>>& image, int i, int j, int color, int newColor) {
        int n = image.size(), m = image[0].size();
        
        // Base cases
        if (i < 0 || j < 0 || i >= n || j >= m) return;
        if (image[i][j] != color) return;
        
        image[i][j] = newColor;

        // Explore 4 directions
        dfs(image, i + 1, j, color, newColor);
        dfs(image, i - 1, j, color, newColor);
        dfs(image, i, j + 1, color, newColor);
        dfs(image, i, j - 1, color, newColor);
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int color = image[sr][sc];
        if (color != newColor)
            dfs(image, sr, sc, color, newColor);
        return image;
    }
};
