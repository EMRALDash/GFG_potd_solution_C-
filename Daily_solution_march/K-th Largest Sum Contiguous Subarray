class Solution {
  public:
    int kthLargest(vector<int> &arr, int k) {
        int n = arr.size();
        // Min-heap to store k largest sums
        priority_queue<int, vector<int>, greater<int>> minHeap;

        // Generate all subarray sums
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += arr[j];

                // Push sum into heap
                minHeap.push(sum);

                // If heap size exceeds k, remove smallest
                if (minHeap.size() > k) {
                    minHeap.pop();
                }
            }
        }

        // Top of heap is k-th largest sum
        return minHeap.top();
    }
};
