class Solution {
  public:
    int maxRectSum(vector<vector<int>> &mat) {
        int n = mat.size();
        int m = mat[0].size();
        int maxSum = INT_MIN;

        for (int left = 0; left < m; left++) {
            vector<int> temp(n, 0); // holds sum between left and right cols

            for (int right = left; right < m; right++) {
                for (int row = 0; row < n; row++) {
                    temp[row] += mat[row][right];
                }

                // Apply Kadane's algorithm on temp[]
                int currSum = temp[0];
                int maxCurr = temp[0];
                for (int i = 1; i < n; i++) {
                    currSum = max(temp[i], currSum + temp[i]);
                    maxCurr = max(maxCurr, currSum);
                }

                maxSum = max(maxSum, maxCurr);
            }
        }

        return maxSum;
    }
};
